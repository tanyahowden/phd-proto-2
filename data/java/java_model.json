[{"Book_Name": "java-the-legend", "Description": "Ben Evans Java : The Legend Past , Present , Future ---- [ LSI ] Java : The Legend Ben Evans Copyright   OReilly Media , Inc. All rights reserved . Printed United States America . Published OReilly Media , Inc. ,  Gravenstein Highway North , Sebastopol , CA .OReilly books may purchased educational , business , sales promotional use . Online editions also available titles ( http : safaribooksonline.com ) . For information , contact corporateinstitutional sales department : -- corporate @ oreilly.com .Editor : Nan Barber Production Editor : Nicholas Adams Proofreader : Nicholas Adams Interior Designer : David Futato Cover Designer : Karen Montgomery Illustrator : Anna Evans September  : First EditionRevision History First Edition -- : First Release The OReilly logo registered trademark OReilly Media , Inc. Java : e Legend , cover image , related trade dress trademarks OReilly Media , Inc . While publisher author used good faith efforts ensure information instructions contained work accurate , publisher author disclaim responsibility errors omissions , including without limi tation responsibility damages resulting use reliance work . Use information instructions contained work risk . If code samples technology work contains describes subject open source licenses intellectual property rights others , responsi bility ensure use thereof complies licenses andor rights . Table Contents Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ix .History Retrospective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  The High-Level Design Java  A Brief History Java  History Open-Source Java  The Age Oracle  Retrospective  .The Java Language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  Primary Java Language Design Goals  Language VM Initially Influenced Each Other  Libraries  Recent Developments  Javas Greatest Hits  The Java Hall Heroic Failure  Conclusion  .The Java Virtual Machine Platform . . . . . . . . . . . . . . . . . . . . . . . .  The Design JVM  Self-Management  Beyond Java  Conclusion  .Java Developers Ecosystem . . . . . . . . . . . . . . . . . . . . . . . . . . .  Overview Java Ecosystem  The Java Community Process  vii The Independent Java Ecosystem  The Java Community Now  .The Future", "max-topic-id": 10, "max-topic": "history-use-conclusion", "Book_ID": 0, "ID": 0}, {"Book_Name": "java-the-legend", "Description": "Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  Java   Further Out  Conclusion  viii | Table Contents Preface My first encounter Java came PhD student Spring  . I earning extra money helping disabled student couldnt physically attend first year Computer Science classes . Id learned Dijkstras algorithm enough graph theory stay ahead class , end term , came asked Id sit another class himsome new programming language called Java. At first I refused , I eventually relented , I clearly remember many late night sitting Physics department printer , waiting print-out tutorials early javadoc I could read class.Little I know language environment would impact life career . Acknowledgements Thanks wife Anna Evans illustrations , Samir Talwar , Helen Scott , Gil Tene technical reviews . To Dalibor Topic correcting timeline events leading release OpenJDK . To OReilly team : Nan Barber , Brian Foster , Heather Scherer , Megan Blanchette . Finally Mike , responsi ble getting industry first place ( youre read ing , please contact OReilly , theyll reconnect us ) . ix CHAPTER History Retrospective The first public release Java May  ,  , alpha avail able Sun Microsystems Solaris operating system . Since first release , Java developed one worlds widely deployed programming environments . It gained traction market share essentially every programming environment , espe cially enterprise software , server-side Web development , mobile phone programming.Java blue collar language . Its PhD thesis material lan guage job . James Gosling It long journey many surprises along way . That journey started early days James Gosling team , sure developers wanted advanced productivity fea tures ( object orientation garbage collection ) , felt many engineers scared complexity lan guages implemented . The High-Level Design Java In language design terms , Java always based number deliberate , opinionated design decisions specific goals mind . The Java platforms initial primary goals summed : To provide container simple execution object-oriented application code  To remove tedious bookkeeping hands developers make platform responsible accounting memory To remove CC++ platform security vulnerabilities wherever possibleTo allow cross-platform execution Notably , goals pursued even expense low-level developer control performance cost early years . By almost completely eliminating cost porting , Java allowed developers focus solving business problems.Georges SaabThe portability goal enthusiastically referred Write Once , Run Anywhere ( WORA ) . It represents idea Java class files could moved one execution platform another run unaltered . It relies existence availability Java Virtual Machine ( JVM ) host platform . Porting Java new plat form thus becomes matter implementing JVM run new platform accordance virtual machine specifica tion ( usually called VMspec ) .A Brief History Java The world Java arrived different one live today . Microsoft counting August release Windows  (", "max-topic-id": 23, "max-topic": "java-developer-platform", "Book_ID": 0, "ID": 1}, {"Book_Name": "java-the-legend", "Description": "would launch without Web browser ) . Net scape yet go public ( IPO ) NASDAQ exchange , although browser steadily gaining popularity . The Inter net , whole , yet truly enter public consciousness . As harbinger things come , Suns initial release Java lan guage accompanied HotJava , browser intended compete then-dominant Mosaic browser , supercede via introduction richer , dynamic applications using Javas applet tech nology . Despite , could predicted impact Javas seemingly modest release would ultimately . Rapidly growing public interest Internet , fueled Netscapes IPO market events , produced conditions kicked first wave enthusiasm ( little hype ) Java . This would ultimately lead surprising consequences , least renaming unrelated scripting language Java  | Chapter  : History Retrospective script order cash public profile Java ecosys tem.Since early , heady days , Java fairly conservative design philosophy often-mocked slow rate change . These attributes , however , overlooked flip sidea conscious attempt protect investment businesses adopted Java technology . After USENIX session James Gosling first talked pub licly Java , people already dancing Javas grave . Mike LoukidesNot , Goslings vision vindicated design decisions Javas early days considered uncon troversial . This provides clear example old software maxim the hated programming languages inevitably widely used. In Javas case , extends plagiarism Javas ideas design principles.As one example , application developers would even try defend opinion memory managed hand days . Even modern systems programming languages , Go Rust , take given runtime must manage memory behalf programmer . The Java language undergone gradual , backwards-compatible revision complete rewrites . This means Javas original design choices , made expediency due restrictions conventions late s technology , still constraining platform today . The early years st century saw rise Enterprise Java , pushed heavily Sun ( later Oracle ) future way develop applications . Initial versions platform ( known origi nally JEE , recently Java EE ) criticized per formance complexity problems . However , despite issues , use Java enterpises continuedcto grow rapid rate . Eventually , lightweight frameworks ( e.g. , Spring ) emerged . As challengers added features , inevitably grew size complexity . At time , Java EE standards progressed , shedding unecessary layers configuration , began focus core needs developers inside enterprise . A Brief History Java |  Today , enterprise space remains vibrant , healthy competi tion different frameworks approaches large-scale development . In last  years , Microsofts .NET framework offered serious competition Java enterprise develop ment . Meanwhile , core Java platform ( Standard Edition ,  Java SE ) standing still early part s . Java  , released  , significant milestone , introduced major changes core language . These included generic types , enumer ated types , annotations , autoboxing . The standard library core application programming interfaces ( APIs ) also substantially upgradedespecially areas concurrent programming remote management ( appli cations JVM ) . These changes judged huge step change Javas evolu", "max-topic-id": 6, "max-topic": "java-language-time", "Book_ID": 0, "ID": 2}, {"Book_Name": "java-the-legend", "Description": "tion , release Java  would impact Java world . Sun also finally dropped Java .X naming scheme , started using major number instead , release Java  . The waves change , language changes Java  , low-level technical upgrades on-demand Just-In-Time ( JIT ) compi lation ( Java . ) , procedural standardisation struc tures , Java Community Process , Java Language Specification , carried Java forward language , platform , ecosystem.History Open-Source Java This seen evolution Suns ( later Oracles ) attitude community open-source . Despite declaring huge support open-source , Sun proceeded cautiously Javas intellectual property concerned . The Java Community Process ( JCP ) set Sun  way bring companies interested parties devel opment process Java standards . Sun wanted bring potential rivals inside tent ,  didnt want lose control Java process . The result industry body represented compro mise competing companies still common cause .  | Chapter  : History Retrospective Responding pressure market wider community , Jonathon Schwartz ( CEO Sun ) announced open- sourcing Java live stage JavaOne  . Legend announcement done without full knowledge management team . This led creation OpenJDK ( Open Java Development Kit ) project  , still responsible development reference implementation Java plat form today . Sun somewhat-open standards process , open-source reference implementation Java . However , path open Java completely smooth . The release train Java  already well underway , felt difficult try move Suns toolchain development practice open process . Instead , drop code in-development Sun proprietary JDK  taken , scrubbed , released seed OpenJDK .The release complicated Suns decision exempt cer tain components open-source release , citing problems obtaining agreement copyright holders . Due approach , OpenJDK  never release precisely corresponded Sun JDK release . However , release train JDK  fixed process , quickly moving open process andby normal commits made directly open repo sitories . This process still followed today . History Open-Source Java |  Figure - . e OpenJDK branching process For participants open Java community , Sun go far enough open-sourcing platform . For example , Testing Compatibility Kit ( TCK ) opened , remained proprietary software . This presented hurdle non-Sun implementations Java , implementation must pass  % TCK order certified compatible implementation Java . The Apache Foundation started open-source , cleanroom imple mentation Java May  , autumn  become top-level Apache project called Apache Harmony . When project underway , Apache approached Sun TCK .  | Chapter  : History Retrospective While outright saying No ,  Sun dragged heels request . This particularly true respect Field Use restrictions Sun added Java SE TCK license , prevented Java SE legally run mobile phone . Finally , April  ,  , Apache Foundation sent open let ter Sun demanding open-source license testing kit would compatible Apache license , rather GNU Public License ( GPL ) OpenJDK uses . Sun produce suitable license , dispute rumbled on.Harmony would", "max-topic-id": 16, "max-topic": "java-source-technology", "Book_ID": 0, "ID": 3}, {"Book_Name": "java-the-legend", "Description": "go used basis Googles Android application programming framework mobile devices . As  , still primary standard library Android developers . After release Java  December  , Sun embarked ambitious plan Java  , grow time passed , late  included proposal much looked-for major new features . These included : Lambda expressions , slightly functional style programmingA completely new system modularising packagaing Java classes replace aging Java Archive ( JAR ) format based upon ZIP filesA new garbage collector called Garbage First ( G ) Enhanced support non-Java dynamic languages running JVMMany community began question , ever , version  would actually arrive . However , soon discover Sun ( Java ) potentially far bigger problems endlessly slipping release date . The Age Oracle By  clear Suns revenue profits serious trouble , Suns Board began seek buyers business . After talks IBM ( allegedly HP ) failed , Oracle emerged buyer , made substantial offer spring  . Upon obtaining The Age Oracle |  approval US EU governments , acquisition Sun completed January  ,  . The first months following acquisition contained upsets high profile departures Oracle ( including James Gosling , original inventor Java ) . Outside Java space , Oracle fared badly , seriously criticized handling open-source technologies acquired Sun.In Java space , trouble arrive late  negotia tions Oracle Google licensing Java technology used Android broke , Oracle sued Google copyright patent infringement . The ecosystem receive another shock , Apache officially withdrew membership JCP Oracle refused grant Apache TCK license Harmony acceptable terms , despite supported Apache Sun original dispute . The Harmony project struggled November  finally choosing disband , Android real inheritor ofthe technology . Apache , yet , returned JCP , many Apaches projects implemented Java JVM languages . The Ora cleGoogle lawsuit rumble May  , judge found decisively favor Google ( although minor aspects case continue appeals courts ) . With effective end OracleGoogle lawsuit initial uncertainty regarding Oracles stewardship Java fading , Java platform seems settled period relative calm . On engineering side , seen several placesmostclearly monolithic plan Java  cut man ageable pieces . First , relatively simple features internal engineering work shipped Java  July  . Next , lambda expressions functional programming support followedas part Java  March  . Finally , long-delayed modularity support intended arrive part Java  , expected released September . | Chapter  : History Retrospective Retrospective To conclude chapter , lets try put history context , remembering course hindsight  . Nowhere apparent Moores law , hypothesis made Intel founder Gordon Moore effect : The number transistors mass-produced chip roughly doubles every  years. This phenomenon , representing exponential increase com puter capability since  , transformative effects com puting ( knock-on effects human society ) . Java par ticularly fortunate beneficiary availability increasing amount computer power . Software eating world . Marc Andreessen Long term bets software always notoriously difficult . For example ,", "max-topic-id": 14, "max-topic": "body-engineering-expression", "Book_ID": 0, "ID": 4}, {"Book_Name": "java-the-legend", "Description": "decisions made many national governments standardize Microsoft early s proved exceptionallyexpensive , provided powerful advantage vendor winning additional work.Java benefited early design decisions , could seen either prescient lucky . The WORA approach pro vided platform-neutral approach time predicted Intel family chip designs would become dominant across essentially entire industry . It also protected Java locked single operating system . Moores law also aided Java providing free lunch terms computing capability . The processor intensive aspects modern Java platform , Profile Guided Optimization ( PGO ) JIT compilation , possible incredible growth power processors.The Java design principle backwards compatibility also proved helpful Java . Large companies felt confi dent investing Java platform part visi ble commitment maintaining older versions breaking working code platform upgrades . Java also less fortunate areas , partially early success . Many large , slow moving organizations ( including Retrospective |  governments ) adopted Java applets standard technology accessing systems Web . Applets technology much time , aged well . The technology proved difficult evolve , applets considered modern development platform many years . However , doggedly persist due large early adopters resistant change . The resulting effect ecosystem Java applets still present platform , major contributor security problems.As reach Javas th birthday , observers begun talk the second age Java. Javas high performance , stability , large numbers developers making attractive choice many software projects . Not , many inter esting new languages ( Clojure Scala ) implemented top JVM.Will Java around recognisable form th ( th ) birthday ? The future , course , uncertain , current evi dence , seems entirely possible .  | Chapter  : History Retrospective CHAPTER The Java Language In chapter , Ill discuss Java language , evolution , status  years field . As youll see , language with stood test time pretty well.Primary Java Language Design Goals Java number design goals formed part plat form since earliest days . Backwards Compatibility The Java platform always concerned backwards compatibility . This means code written ( even compiled ) earlier version platform must continue keep working later releases platform . This principle allows development groups high degree confidence upgrade JDK JRE break cur rently working applications . The platform successful achieving code written Java . still compile  years later Java  installation without modification ( fact , compatibility even stronger , youll see next chapter ) . Backwards compatibility great strength Java language platform , order achieve necessary constraints required . Youll meet good example presently , see  detail impacted evolution recent version , Java SE .Easy Learn Read Javas approach code easy read , accord ance well-known principle code read often written.Java feels familiar many different programmers preferred tried-and-tested things.James Gosling By preferring familiar things , Java language aims easy learn teach . It surprise language one mostly widely used teaching languages universities.The Java language also promotes old adage pity poor maintanence programmer. If code read often writ ten ( ) , comprehension key", "max-topic-id": 23, "max-topic": "java-developer-platform", "Book_ID": 0, "ID": 5}, {"Book_Name": "java-the-legend", "Description": "reading source code . This especially true reading code due outage abug.Java serves goal providing lot information , especially type data objects , source . Some users find information overly verbose repetitive , helpful , especially newcomers , debugging.Modern development environments ( IDEs ) also alleviate need lot boilerplate , auto-generating code possible . Still , critics argue unnecessary tools work around problems like . Whether fully justified , Javas wordiness become part folklore surrounding language , theextent developers come Java languages fre quently express surprise verbosity bad portrayed . Simple Type System Java differentiates two types values . These object ref erences , eight primitive types ( boolean , byte , short , char , int , long , float , double ) , objects merely immutable data items .  | Chapter  : The Java Language This split relatively simple , type system objects single-rooted ( everything ultimately inherits java.lang.Object ) single-inherited ( every class one parent class ) . The split references primitives Javas type system represents something compromise accident history . The distinction objects primitives made certainamount sense late s Java developed , per formance basic numerical operations important design goal . However , industry developed early st century , languages like Ruby Scala proved value everything object. Compiler technology developed allow specialization objects primitives possible , providing convenience object-oriented programming performance primitives . Unfortunately , largely late Java , backwards com patibility language type system , sheer volume existing Java code made moving everything object simply impractical . Java instead implemented partial solutionthe auto matic boxing unboxing primitive values objects belong ing specific partner class primitive type . This reasonably successful , came cost additional complexity also exposed previously rather obscure debates object identity , forced many programmers think . In Javas reference type system , approach object-oriented pro gramming started reasonably simple . All classes single parent class , classes ultimately inherit java.lang.Object . As form inheritance rather inflexible , Java . also introduced separate concept , interface , pro vides specification functionality class may advertise offers.If class wants declare offers functionality compatible interface , via class Foo implementsFunctionality construct . In Java . Java  , class required provide implementation code every method declared interface . Interface files allowed provide method bodiesmerely signatures names methods formed part collection functionality must imple mented conform interface . Primary Java Language Design Goals |  This model types significantly extended several different directions Java  . Firstly , notion typesafe constant , enumeration introduced via enum keyword . This enableddevelopers indicate particular type finite known number possible , constant , values . This replaced CC++ convention using integer constants via typedef mech anism.Javas enum constants stronger predecessors true types inherit Object . This facility relies uponadditional language machinery ensure specified instances ever exist.Enums useful addition Java type system , rep resented significant upgrade previous approaches . However , important note compared Scala languages advanced type systems , Java allows representation disjoint alternatives instances , rather", "max-topic-id": 13, "max-topic": "java-type-language", "Book_ID": 0, "ID": 6}, {"Book_Name": "java-the-legend", "Description": "types . The second addition type system introduced Java  metadata facility . Java developers previously used out band information , naming conventions ( JUnit ) additional marker interfaces ( contained methods ) . Java  introduced annotations , way exhibiting additional metadata , relevant , essentially independent functionality type . This sometimes referred orthogonal type information . Annotations proved fundamentally different new part Javas type system . Annotations fundamentally flexible interfaces ( although mechanism makes use ) . Instead , classes , methods , even packages annotated additional infor mation . For example , method intended end point web services ( REST ) call , appropriate information sup port provided automatically web container hosting service .  | Chapter  : The Java Language Language VM Initially Inuenced Each Other In earliest days platform , designs Java language JVM exerted certain degree influence . This seen , example , typing Java bytecodes . The Java language separate primitive reference types ( point objects contained Javas heap ) . This means pro grammers code always know type expression . This manifests JVMspecifically principle interpretation given bit pattern differs , depending whether pattern type int , float , heap address.Accordingly , JVM bytecode typed types essentially Java language . The result JVM bytecodes fall families several individual opcodes deal specific circumstances encountered normal cod ing.For example , return family bytecodes contains ireturn amethod returns int , dreturn method returns double , areturn method returns reference ( think : address ) . In recent years , Java language moved deeply con nected workings JVM , first among equals merely first high-level language ran JVM . The obvious sign Java resigning privileged place firmament JVM languages came Java  , invokedynamic bytecode added standard . At time , reference implementation Java language compiler , Oracles javac , would circumstances emit invokedynamicopcode . Here opcode added purely benefit non-Java languages , reference Java whatsoever . Libraries Not everything language design language core . Many fea tures implemented variety ways , language change expensive terms resources . Therefore , wherever possible , Language VM Initially Inuenced Each Other |  Java principle new features implemented libraries.Java , language , pretty simple , languages . The real action libraries , tried hard fairly large class library straight box . James Gosling One place principle manifested area ofarrays collections . All programming languages need manipu late data en masse , languages provide assortment fun damental data structures programmer use part basic installation . Java exception . Arrays Collections Java . two different types data structures shipped platformarrays , provided within syntax language , classes ( Hashtable Vector ) resided within java.util package Java standard library . This represented compromise . Programmers expected familiar C-like syntax handling arrays , especially arrays primitive types . On hand , heap-managed data , arrays defi nitely objects Java worldview . This resulted halfway house , object nature arrays somewhat sidelined , set rather obvious disconnect seemingly simple arrays object-oriented view contained", "max-topic-id": 13, "max-topic": "java-type-language", "Book_ID": 0, "ID": 7}, {"Book_Name": "java-the-legend", "Description": "classes java.util.With arrival Java . ( Java  marketing went ) , Java received major upgrade form Java Collections libra ries . This full set data structures covering common cases , lists , sets , maps . However , increased emphasis object-oriented approach , split arrays object-based data structures became even obvious . One biggest changes language Java Generics , appeared part Java  . Generics enable programmer rep resent composite type , usually thought comprising con tainer payload type . Before Java  , programmer could discuss type Box without reference box contained . Using Java Generics , however , type could qualified Box < Egg > Box < Wine > Box < Shoe > . This provides for | Chapter  : The Java Language improved safety programming , source compiler detect mistaken attempts put wine objects really shoeboxes eggboxes.Recent Developments The last releases Java seen steps direction making Java require less boilerplate code . Reducing VerbosityJava  First , Java  , notion type inference introduced . Previ ously , javac would require poor programmer write typeinformation excruciating detail : Map < String , String > enToFrDict = new HashMap < String , String > ( ) ; The arrival Java  allowed programmers make modest savings keystrokes : Map < String , String > enToFrDict = new HashMap < > ( ) ; type information generics ommitted right-hand side . Another place type information used condense code feature called multicatch . Java contains concept exception , used indicate unexpected condition encountered . Operations file handling may result number different possible error conditions ( file found , permission denied , etc . ) occuring . Java therefore allows multiple recovery strategies ( called catch blocks ) specified , strategy executed chosen based type problem experienced . In Java  earlier , catch block must specified separately , possibly leading lot repeated code : try {  Try read class file disc , classload  get class object access method reflexively .   This process fail number different ways ... } catch ( IOException iox ) {  ... Recent Developments |  } catch ( InstantiationException instx ) {  ... } catch ( IllegalAccessException ilax ) {  ... } catch ( NoSuchMethodException nsmx ) {  ... } catch ( SecurityException secx ) {  ... } catch ( IllegalArgumentException ilargx ) {  ... } catch ( InvocationTargetException invtx ) {  ... } In Java  however , language syntax extended allow catch block handle several different exceptions , like : try {  Same loading process } catch ( IOException | InstantiationException| IllegalAccessException | NoSuchMethodException| SecurityException | IllegalArgumentException| InvocationTargetException ex ) {  But handle failures  single recovery block } Towards FutureJava  One eagerly awaited features Java  addition language support lambda expressions ( aka function literals orclosures ) . Previously , Java developers forced use anony mous classes verbose substitute . However , simply adding language syntax whole", "max-topic-id": 13, "max-topic": "java-type-language", "Book_ID": 0, "ID": 8}, {"Book_Name": "java-the-legend", "Description": "story .  | Chapter  : The Java Language The overall aim lambda expressions per se , rather evolve Javas collections allow support more functional oper ations , map filter . This problematic , due Javas requirement backwards compatibility . One Javas language constraints arises compatibility Java interfaces may new methods added new release interface . This methods added , existing implementations interface would methods . That would mean older implementations would seen valid implementation new version inter face , binary backwards compatibility would broken . This could allowed happen , different path chosenallowing interface specify default implementation new methods . With change , new methods added interfacesprovided default methods . Older imple mentations interfaces , implementation new method , simply use default provided interface definition.This change side effect changing Javas model object- oriented programming . Before Java  , model strictly single- inherited ( implementation ) interfaces providing addi tional way types express compatibility capability . This sometimes criticized forcing types repeat implemen tation code unecessarily . With Java  , however , Javas model objects changes , allow mul tiple inheritance , implementation . This full multiple inheritance state implemented C++ Scala . Instead , thought essentially form stateless trait way implement mixin pattern . Java language evolved fairly gradually , experiences adding lambdas ( sometimes called Project Lambda working group produced ) shown us entirely possible major changes implemented without giving backwards compatibility feel Java . Javas Greatest Hits Like languages , Java good parts bad parts . Some Javas successes particularly notable responsible Javas Greatest Hits |  making Java one pre-eminent programming languages world.Threading Java first mainstream language support threading day one . This opened door concurrent programming becom ing part mainstream developers working lives.The launch Java coincided well growth multicore sys tems . Threaded programs scale multiple cores way impossible single-threaded code . Threading proved essential tool developing larger sophisticated systems , desktop server environments . Javas ground-up support contrasts favorably languages threading afterthought . For example , Perls support threading never really became stable , Ruby world , groups want use threading prefer version Ruby runs top JVM uses Java threading support ( JRuby ) . Language Stability The core Java language evolved modestly since first ver sion . There keywords added since earliest versions , language remained quite recognizableover time , additions generics ( Java  ) lambdas ( Java  ) really changing feel language . This one features made Java popular enterprises larger shops . The stability made possible build engineering teams clear roadmap technology , speaks aspiration Java technology ordinary developers produce business functionality . Javas Type System Javas type system characterized : NominalThe name Java type paramount importance . Java permit structural types way lan guages . StaticAll Java variables types known com pile time. | Chapter  : The Java Language ObjectImperativeJava code object-oriented , code must live inside methods , must live inside classes . How ever , Javas primitive types prevent adoption everything object", "max-topic-id": 6, "max-topic": "java-language-time", "Book_ID": 0, "ID": 9}, {"Book_Name": "java-the-legend", "Description": "worldview . Slightly functionalJava provides support common functional idioms , convenience pro grammers anything else . Modestly type-inferredJava optimized readability ( even novice progammers ) prefers explicit , even cost repetition information . Strongly backwards compatibleJava primarily business- focused language , backwards compatibility protection existing codebases high priority . Type erasedJava permits parameterized types , infor mation available runtime . Javas type system evolved ( albeit slowly cautiously ) years , addition lambda expressions , parwith type systems mainstream programming languages.Lambdas , along default methods , represent greatest trans formation since advent Java  , introduction gener ics , annotations , related innovations . The Java Hall Heroic Failure Java major part computing landscape last  years . In time , along major successes , number experiments language design gone well hoped . Long-lived languages inevitably warts annoyances upon . For example , Javas case : Java Beans This idea every field every Java object obey public getter setter convention , order promote interopera bility nebulous poorly-conveyed idea standardization . They originally felt right convention handling Java objects . The Java Hall Heroic Failure |  The term Java Beans predates Enterprise Java , confused Enterprise Java Beans ( EJBs ) . In practice , however , idea properties mutable turned toxic . Instead , became clear concurrect pro gramming contained worms made Java Beans approach unsound usages . Finalization Probably worst feature Java . The original intention provide method automatically closing resources longer needed ( similar spirit C++ RAII pattern ) . However , mechanism relies upon Javas garbage collection , non-deterministic . Thus , using finalization reclaim resources fundamentally unsafe ( developer know long resource freed ) . Therefore impossi ble use finalization way avoiding resource exhaustion , feature fixed . In words , never use finalization . Instead , Java  introduced try-with-resources way automat ically controlling closing resources actually satisfies needs Java programmers . Java EE Over-CongurationEarly versions Java EE standards required programmer write almost overwhelming amount configuration , mostly XML . This almost completely obscured goal platform , provide simple , business-focused environment infrastructure concerns could provided container . Over time , successive versions Java EE ( known ) reduced configuration burden , extent Java EE completely modern pleasant environment serverside web development . However , mention earlier versions Javas Enterprise Java Beans still provokes horror many older devel opers. | Chapter  : The Java Language Threading Java first mainstream language support threading day one . As result , proving ground many practical problems involved writing safe , robust concurrent code discovered.Thread low-level abstraction , programmers expected manually manage concurrency earliest versions Java . This improved arrival java.util.concurrent inJava  , subsequent development . However , time , many programmers felt firsthand complexities frustra tions programming Javas threads . Other languages learned pain felt early pio neers concurrent programming Java . For example , Scala Clojure built sophisticated safer constructs top underpinnings provided Java JVM . Elsewhere , actor model Gos goroutines provided alternative", "max-topic-id": 15, "max-topic": "programmer-box-resource", "Book_ID": 0, "ID": 10}, {"Book_Name": "java-the-legend", "Description": "view concurrent programming . Conclusion Software engineering profession still , despite  years practice , immature discipline . Each new language wants successful strive push envelope known software process creation . Some pushes suc ceed lead valuable new insights programmers think complex domains exist within software . Dont underestimate value failed experiments , though . Any adventurous language significant userbase extended period plenty warts battle scars name , Java exception . Conclusion |  CHAPTER The Java Virtual Machine Platform The Java language drew upon many years experience earlier programming environments , notably C C++ . This quite deliberate , James Gosling wanted familiar environment pro grammers work within . It isnt much exaggeration describe Java language C++ simplified ordinary develop ers. However , Java code execute without Java Virtual Machine ( JVM ) . This scheme provides suitable runtime environment Java programs execute . Put another way , Java programs unable run unless JVM available appropriate hardware OS want execute . This may seem like chicken-and-egg problem first sight , JVM ported run wide variety environments . Anything TV set-top box huge mainframe probably JVM available . In environments like Unix Windows , Java programs typi cally started command line , e.g . : java < arguments > < program name > This command starts JVM operating system process . In turn , process provides Java runtime environment , finally executes Java program inside freshly started ( empty ) virtual machine .  The Design JVM The design JVM also drew experiences designerswith languages C C++ ( also dynamic languages Lisp Smalltalk ) . In addition , took boldsteps advance state computing industry . These steps included use stack-based virtual machine technology assist porting enable strong security pinch point. When JVM executes program , supplied languagesource code . Instead , source must converted ( com piled ) form known Java bytecode . The JVM expects pro grams supplied format called class les ( always .class extension ) . It class files , rather original source executed Java program runs . The JVM Interpreter Bytecode The JVM specification describes interpreter bytecode must operate . Put simply , steps program one bytecode instruction time . However , Java JVM languages natively support threading , JVM user program capable spawning additional threads execution . As result , user program may many different functions running . The Java language JVM bytecode developed somewhat separately , requirement two exactly repli cate . One obvious example happens Javas loop keywords ( , , etc. ) . They compiled away javac , replaced bytecode branch instructions . In fact , JVM bytecode , flow control instructions consist state ments , jumps , method invocation . From bytecode perspective also safety feature , parti tions transfer control local operations ( essentially jmp ) , range-checked , non-local operations , forced go method dispatch mechanism . Nowhere JVM bytecode Cs unsafe transfer control arbitrary memory address construct supported . Bytecode also allows number perfectly legal constructions Java source", "max-topic-id": 3, "max-topic": "language-jvm-bytecode", "Book_ID": 0, "ID": 11}, {"Book_Name": "java-the-legend", "Description": "compiler would ever emit . However , write byte  | Chapter  : The Java Virtual Machine Platform code directly access capabilities create classes unusual properties . For example , Java language spec requires every class least one constructor , javac insert simple constructor omitted . However , raw bytecode completely possible write classes constructor . Such classes com pletely usable Java , provided static access fields methods used.The separation required either language JVM , co-evolution aspects means areas nature JVM leaks through Java language , vice versa.Inuence Language VM Each Other For example , consider insistence Java language voidis type , merely represents absence return type . This outlook seem strange Java beginner , really stems design JVM.The Java Virtual Machine stack machine , sense method evaluation stack intermediate results worked final result handed back caller . To see action , consider bit Java code : class GetSet { private int one ; public int getOne ( ) { return one ; } public void setOne ( int one ) { this.one = one ; } } This Java code , compiled javac , produces bytecodefor getOne ( ) method : public int getOne ( ) ; Code :  : aload_  : getfield #   Field one : I  : ireturnThe Design JVM |  When executed , aload_ bytecode places top theexecution stack . Next , getfield opcode consumes value ofthe top stack replaces object field corre sponds position  table constants ( classs Constant Pool ) class . Figure - . e JVM stack getOne ( ) Finally , method explicitly returns caller , indicating ( ini tial letter ireturn ) int top stack collected return value . This explicitness returntype allows static checking JVM bytecode class loading , helps improve Java security model . Now consider corresponding setter method . This compiles bytecode shown : public void setOne ( int ) ; Code: | Chapter  : The Java Virtual Machine Platform  : aload_  : iload_  : putfield #   Field one : I  : returnHere , course , nothing return , putfield opcodeconsumes also value pushed onto stack ( value object field set ) . Accordingly , return opcode prefixas evaluation stack setOne ( ) entirely empty . Figure - . e JVM stack setOne ( ) The Design JVM |  So , Java keyword void indicates method returns value ,  its type , corresponds JVM condi tion method returns evaluation stack empty state. The low-level JVM design decision mirrors condition themethod execution stack signature high-level language . Java makes decision preference alternatives , creat ing specific type purpose indicating condition ( Scala Unit type ) . This design decision far- reaching consequences , especially advanced Java lan guage constructs ( reflection generics ) introduced ; thats language design complex undertaking . To define language feature given release open door uninten ded consequences future , additional language features seen desirable.Due Javas stringent backwards", "max-topic-id": 2, "max-topic": "stack-return-decision", "Book_ID": 0, "ID": 12}, {"Book_Name": "java-the-legend", "Description": "compatibility requirements , unknown interactions language features ( present future ) force driven language conserva tive . If language maintain perfect consistency adopting new features , todays must-have new feature may exact thing constrains language next release.For example , Java  introduced invokedynamic bytecode . Thiswas big step advancing JVM making friendlier tonon-Java JVM languages . It introduced platform cautiously . The version javac ships Java  , circumstances , emit invokedynamic instruction . For Java  , feature used implement features related lambda expressions ( default methods ) , still direct lan guage support manipulating dynamic call sites . Self-Management There another major aspect JVMs design thats always recognized beginners : use runtime information enable JVM self-manage , sometimes called prole guided optimiza tion ( PGO ) .Software research revealed runtime behavior pro grams large number potentially useful patterns cant  | Chapter  : The Java Virtual Machine Platform predicted ahead time . The JVM first mainstream plat form try utilize research . Time developers chose Java , reaped bene fits implementation continuing improve hard ware OS , making existing programs better without theirhaving lift finger . Georges SaabThe JVM collects runtime information make better decisions execute code . Through monitoring , JVM canoptimize program achieve better performance . In fact , modern JVMs frequently provide performance beyond capability platforms dont PGO . Just-In-Time Compilation One example PGO based observation parts Java program called far often others ( methods rarely , ever called ) . The Java platform takes advantage fact technology called just-in-time ( JIT ) compilation . In HotSpot JVM , profiling subsystem identifies methods program called frequently . These methods eligi ble compilation machine code , allows important parts code achieve far higher performance possible interpreted code . In Javas  year history , optimizations used JVM advanced point often sur passes performance compiled C C++ code . In order assist JIT compiler , javac source code compiler performs limited optimizations , instead produces dumb bytecode. This provides easy-to-understand representa tion program.For example , javac recognize eliminate tail recursion . So code : public static void main ( String [ ] args ) { int = inc (  , ___ ) ; System.out.println ( ) ; } private static int inc ( int , int iter ) { ( iter >  ) return inc ( i+ , iter- ) ; Self-Management |  else return ; } cause stack overflow run . The equivalent Scala code , how ever , would run fine , scalac great deal optimiza tion compile time , optimize away tail recursion . The general philosophy JIT compiler part sys tem best able cope optimizing code . So javac allows JITcompiler free reign apply complex optimizations ( although include tail recursion elimination ) . Garbage Collection The JVM allows automatic management memory , via garbage collection ( GC ) . This typically runs separate , out-of-band task within JVM , user code neither knows cares about.Javas approach GC ,", "max-topic-id": 20, "max-topic": "code-program-jvm", "Book_ID": 0, "ID": 13}, {"Book_Name": "java-the-legend", "Description": "least Hotspot JVM , unique . Hot spot regards collectors pluggable systems , box theJVM several different algorithms available . Each highly configurable , ability adapt operation allocation behavior runtime conditions running Java process . The self-management features JVM contributed emergence highly performant execution defining feature overall Java environment . Gone days Java punchline jokes poor performance . However , JVM proved reach utility outside Java code . Beyond Java The JVM turns quite good general purpose virtualmachine . The mixture performant primitive operations object orientation good fit wide range languages . There versions languages Ruby , Python , Lisp , Javascript run top JVM . Its relatively easy imple ment two-level interpreter , language interpreter written Java . Not , far sophisticated options possible . For example , JRuby starts using interpreted mode Ruby , use JIT compilation convert important methods  | Chapter  : The Java Virtual Machine Platform JVM bytecode . Eventually , JVMs JIT compiler kick , Ruby method compiled native code . One main advantages using JVM language runtime its easy interoperate Java bytecode . This means individual language need reimplement full library support , start language-specific wrapper existing library . This allows new JVM languages piggy-back established Java ecosystem . Languages fundamentally aim a better Java ,  Scala Kotlin , require good interoperability Java gain traction credibility . However , perhaps surprising good interoperability story languages close Java linguistic terms . For example , Java  shipped Nashorn implementation Java script . This first implementation Javascript hit  % conformance ECMA standard testing kit . Despite historical accident led similarity names , Java Javascript radically different languages . The fact Javascript implemented top JVM huge win . This helped tight integration available Javascript Java . In Nashorn , every Java type exposed via extremely simple natural mechanism . This means seamless access Java scripting environment . Not , every Java script function value used Java lambda expression , vice versa.A similar picture also emerges Clojure language . Clojure JVM language Lisp family . Language pedants may argue whether Clojure actual Lisp , Lisp dialect , merely language overall diaspora . However , Lisp nature Clojure apparent first sight . Its necessarily language would seem easy integrate Java first sight , since type systems feel languages totally different . In Nashorn Clojure case , language implemen tors taken time expended effort ensure Java libra ries easily accessible , feel idiomatic language transplanted . Since JVM first-class target even languages different Java Lisp Javascript , stands reason JVM Beyond Java |  would good general home programming languages . There isalso historical trendwith release Java  , specifications explicitly broke references Java language JVM spec . Instead , Java first among equals terms languages run ning JVMa privileged position , game intown.We see way invokedynamic handled . It introduced Java  order help non-Java languages ( notably JRuby , although would almost impossible build Nas horn without something like invokedynamic ) . At time", "max-topic-id": 3, "max-topic": "language-jvm-bytecode", "Book_ID": 0, "ID": 14}, {"Book_Name": "java-the-legend", "Description": "writ ing , plans give Java language way directly access invokedynamic call sites . Instead , its seen feature library builders non-Java languages . Conclusion The JVM enormous success . Some design lessonslearned evolution widely adopted lan guages . Features novel part furni ture standard toolkit building virtual machines . It cer tainly isnt perfect , represents centuries engineering effort , end result general purpose virtual machine argua bly best available target sorts programming languages .  | Chapter  : The Java Virtual Machine Platform CHAPTER Java Developers Ecosystem Dont listen Hollywood . Thats good advice circum stances , thinking technology its particularly true . The movies would believing tech individ ual intellectual endeavor . In fact , practice technology always social activity . Even mass adoption free open-source software , sharing code ideas already central feature technology culture.So comes surprise sufficiently advanced technology tends develop ecosystem community alongside . Once , Java unexceptional , developer ecosystem grew around , exceptional , ecosystem evolved something quite unlike language platform com munity . Overview Java Ecosystem Javas reach encompasses , estimates , least  million pro grammers . This gives one largest important devel oper communities . Only WebJavascript communities ( arguably CC++ ) come near size Java community . For serious , safe application development , Java pretty close game town . Its robust stable platform ,  despite size reputation solidity , Java , times , suffer image problem . Being competent , practical language necessarily endear language people used working day , every day . Another issue Suns early marketing material tended overly optimistic promising benefits developer someareas . The Java developers whove around since early days sometimes little cynical platform , may bat tle scars working early versions platform . Its also worth remembering Java unashamedly pitched business enterprise development . This isnt necessarily cohort freestyling open-source enthusiasts sometimes found languages . At risk stereotyping , Java developers likely people code day go home families , rather rush hackday evening . This mean commentators overlook open-source parts Java ecosystem . On hand , even Java developers less likely get involved after-hours development , sheer size Java community means still large number developers engaged open-source work Java . The Java Community Process Developer uptake good early years Javas release , Sun bigger ambitions . They wanted Java become wide spread standard set technologies , didnt resources develop support integrations components would required broad push . As result , Sun neededadoption Java larger corporations ( IBM , Fujitsu , HP ) .Many companies concerned rise Microsoft , Java technology potentially offered opportunity hedge risk . Sun didnt want cede control Java , saw huge potential technology , created industry body resembled standards body . The idea standardization would prevent migration ( followed lock-in ) Suns customers Java tech nology stacks produced vendors .  | Chapter  : Java Developers Ecosystem Founded  , JCP way formalising standardising Java technologies . The JCP uses Java Specification Requests (", "max-topic-id": 23, "max-topic": "java-developer-platform", "Book_ID": 0, "ID": 15}, {"Book_Name": "java-the-legend", "Description": "JSRs ) , official working groups , led Specification Lead , produce specification document , testing kit , reference imple mentation . The JCP fairly unique includes patent intellectual property regime protects end users participants . To partici pate JCP , corporations required provide license patents form part standards . A JSR defined lifecycle , whereby technology standard worked upon guided stages maturity reached point ready widespread developer use . This ensure technologies widely adopted enough , achieved degree acceptance stability targeted standardization . This resulted process several different classes JSR exist . For example , new version Java SE , EE , ME umbrella JSR covers content platform release . The recent release Java SE version  , corresponding umbrella JSR JSR  . However , umbrellas usually bring together JSRs major new language features developed . JSR  therefore included JSR  ( type annotations ) , JSR  ( new date time libraries ) , JSR  ( lambda expressions ) .In addition umbrella JSRs , JSRs dealing major new features , also JSRs corresponding major libraries , XML parsing ( JSR  ) servlets ( various , latest JSR  ) . There also niche JSRs , cater particular style programming , real-time specification Java ( JSR  ) . Finally , processes JCP specified JSRs , occa sionally JSRs filed modify update JSR workflow practices JCP . The Independent Java Ecosystem Java always ecosystem enthusiasts outside Sun ( later Oracle ) . In early years , developers wanted tinker explore limitations platform , often case open-source hackers . By bumping edge possible , devel The Independent Java Ecosystem |  opers exposed missing features could added future releases , making Java even stronger . In time , number independent projects evolved , even open-sourcing platform , many developers chose con tinue working outside official projects , OpenJDK . Eclipse IBM working produce IDE Java , based VisualAge product . This led creation Java-based IDE Java , became known Eclipse . In late  , IBM released open-source code , brought together consortium companies steward technology . This led creation independent foundation , Eclipse Foundation ,  . Although IDE product remains principal project whichEclipse known , Foundation actually hosts  soft ware projects , covering areas rich client development business intelligence reporting . In recent years Eclipse Foundation continued grow diversify , including technologies unrelated Java . It also hosts major project related emerging software technology known Internet Things ( IoT ) . ApacheThe Apache Foundation predates Java . In fact , initial focus Apache web server , httpd . Over years , Apache expanded outwards runaway success web server , became broad , language-agnostic foundation . The projects hosted banner Apache Foundation cover almost every aspect tech nology open-source code could play role . Not , open-source license written Apache Foundation enthusiastically adopted large number projects part , governed Apache Founda tion . Its therefore important distinguish an Apache project ,  one officially", "max-topic-id": 19, "max-topic": "apache-project-foundation", "Book_ID": 0, "ID": 16}, {"Book_Name": "java-the-legend", "Description": "onboarded part Apache Foundation , simply an Apache-licensed project ,  uses Apache license . As Java expanded many areas enterprise development beyond , inevitable Apache projects would end  | Chapter  : Java Developers Ecosystem written Java . However , least first , led strange situation numerous open-source libraries written non- open-source platform . Even OpenJDK became reality , Apache license GPL license used OpenJDK remained irreconcilably incompatible . The response Apache Foundation licensing concerns begin complete compatible rewrite Java class libraries Harmony . Despite qualified technical success , Harmony plagued legal problems , discussed Chapter  .This culminated Oracles refusal grant TCK licence Har mony . Apache resigned JCP Executive Committee pro test December  , mothballed Harmony months later . Today , relationship Apache Oracle near standstill . Java library projects still thrive proliferate , Apache-licensed Apache Foundation projects . However , direct rapprochement two sides , scars Harmony dispute still painfully visible . Spring Sun invested heavily bet rise Java enterprise language platform . The scope vision quite ambitious , aiming largely completely free ordinary developer busi ness applications low-level concerns . The first versions Enterprise Java vision plagued problems . The fundamental problem space simply understood well enough first . Separating business logic concerns infrastructure , separating configuration deployment worthy goal . However , correct positioning dividing lines concerns issomewhat subtle seems first glance . As result , Javas footprint enterprise continued grow , teams looking ways simplify complexity still provide powerful techniques define , configure , deploytheir applications . Against backdrop , alternatives official enterprise Java stacks began emerge . One best known powerful , The Independent Java Ecosystem |  Spring framework . This originally created Rod John son first released open-source software .The initial idea behind Spring framework provide much lightweight way configuring executing applications possible within orthodoxy pure enterprise Java . By separating core concern configuration , Spring frees container responsibility . The design Spring allows application developer chose container fits needs application ( including requiring container ) . Like successful technology , users became familiar , started discover use cases catered , missing features . Over time , Spring became larger collection semi- related interoperable technologies provide full-featured framework comparable capability Java EE . Of course , catering larger set features concerns price . Spring longer smaller less complex technology stack originally started response . The Spring community flourished technology matured , numerous Spring developers usu ally , exclusively , take Spring stack baseline new Java development . Outside , Spring permeated throughout Java ecosystem , working Java program mers encountered Spring technologies point career . The Java Community Now Todays Java community result widespread developer adop tion , corporate politics , global economic forces , measure blind luck . Software development increasingly global ized , simplicity relatively small cognitive footprint Java meant platform travelled well prospered industry expanded . In section , well look prominent features global Java community . JUGsJava User Groups ( JUGs ) informal groups", "max-topic-id": 0, "max-topic": "spring-application-enterprise", "Book_ID": 0, "ID": 17}, {"Book_Name": "java-the-legend", "Description": "Java programmers chosen organize loose association order  | Chapter  : Java Developers Ecosystem share experience knowledge , network , enhance others professional development . Oracle enforce particular rules JUGs . Instead , Ora cle simply asks new JUG forms , register Ora cles community staff . The company maintains list groups , offers support promotion them.JUGs great way meet new people , hear new technol ogy , expand skills , get involved open-source , even find new career opportunities . Some largest influential groups include SouJava ( Brazil ) London Java Community ( UK ) , JUGs sizes world.One original maxims free open-source software takes single developer sit decide scratch technical itch , decide share work freely . Developers come corporate background may exposed philosophy much . So may sur prised small amount work thats required set JUG , collect Java developers together , start making difference . One ways JUGs started trying improve ecosystem Adopt programs . These JUG-led global programs founded London Java Community , designed provide ways ordinary Java developers contribute development new Java standards ( JSRs ) refer ence implementation ( OpenJDK ) . Even single , isolated developer welcome participate , make useful contribution ( https : java.netprojectsadoptopenjdk ) .Java Champions The Java Champions program started Sun recognize encourage Java professionals working outside Sun . While theres precise definition , core values Champion leader , technology luminary ( technical stature involve ment exciting tech ) , influential , independent , credi ble developers.The Java Champions exclusive group passionate Java tech nology community leaders community-nominated selected project sponsored Oracle.OracleThe Java Community Now |  The program contains hundred expert developers world wide , diverse group , geographically every regard . They form informal leadership group ( along withthe JUG leaders ) Java practised industry . The landscape Java developers complex , remains healthy . The vast majority Java programmers leave work behind finish day , course . Fortunately , overall pool developers big , enthusiast , person wants enhance career find plenty ways engage .  | Chapter  : Java Developers Ecosystem CHAPTER The Future Java Finally , lets turn future language , platform , devel oper ecosystem . Increasingly , become interwoven , makes sense treat whole look crystal ball . Java  The next major release platform Java  , scheduled Sep tember  . As releases go , its expected fairly major one , contains number large features ( although impact compare arrival lambdas Java  remains seen ) . ModulesIf lambda expressions headline feature Java  , Java  anticipated modules . Up , largest grouping construct Java code package , release Java  see new conceptthe module . Modules collections code larger packages , longer delivered JAR files ( really .zip files ) . Instead , modules new file format designed efficient . Modules also add major new feature language , ability enforce access control across modules . That , modules able fully specify public API , prevent", "max-topic-id": 23, "max-topic": "java-developer-platform", "Book_ID": 0, "ID": 18}, {"Book_Name": "java-the-legend", "Description": "access pack ages internal use . The ability modules allow internals access trusted cli ent code major repercussions Java applications . This  apparent removal access class called sun.misc.Unsafe . This class internal class ( seen fact lives sun package , rather java javaxpackage ) used directly applications libraries . Unsafe contains functionality enables low-level access plat form features normally inaccessible ordinary Java code . It also contains code directly access processor features , compare- and-swap hardware example . These capabilities part Java standard , yet extremely useful . The JDK class libraries make heavy use Unsafe , especially places concurrency classes.However , name suggests , powerful potentially damaging methods contained within Unsafe , ithas never standardized . So , Java  onwards , class longer available classes form part JDK . Unfortunately , features widely used many popular Java frameworks , performance flexibility reasons . So even Java application doesnt directly call code Unsafe , thechances somewhere stack , use library rely Unsafe.The platform needs evolve , removal access internals huge step forward writing maintainable composable code . However , its exaggeration say removal Unsafe potential break every non-trivial Java application currently running . To developers , seems like backwards incompatible change . From Oracles point view , however , sun packages areinternal code , guaranteed remain unchanged . In view , libraries frameworks rely implementation details rather public APIs risk . This leads ten sion needs core platform , libraries users rely on.To resolve conflict , given scope impact changes , transition must handled care clear commu nication . Oracle consulting wider community time writing reasonable consensus proceed seems beemerging. | Chapter  : The Future Java Change Default Garbage Collector The current default garbage collector parallel collector . The parallel collector extremely efficient , designed high- throughput operation uses small amounts CPU time collect memory . However , collector must pause JVM run garbage collection cycle ( sometimes called Stop The World ( STW ) operation ) . These pauses typically last hun dred milliseconds heaps  GB less . In Java  , Oracle proposes change default collector new Garbage First ( G ) collector . This uses modern GC algo rithm work without pausing fully . The aim let users set pause goals JVM try adhere . How ever , G drawbacks : uses much CPU time overall collect memory , still possibility significant pause . By default , G try pause ms , unless nec essary , isnt necessarily huge improvement parallel . G also lacking real-world testing . Despite available since Java  , relatively Java shops adopted , true impact changing default collector unknown . Applications run without explicit choice collector affected change ofdefault . Limited research done percentage appli cations would potentially affected , indications could  % .HTTP The HTTP standard new version Webs primary proto col , HTTP . The previous version , HTTP. , dates  encountered significant problems ( head-of-line block ing ) Web grown . The", "max-topic-id": 1, "max-topic": "access-work-collector", "Book_ID": 0, "ID": 19}, {"Book_Name": "java-the-legend", "Description": "new standard created Internet Engineering Task Force ( IETF ) HTTP Working Group , comprised engineers major Web companies browser manufacturers . The basic semantics ( including methods ) HTTP fundamentally changed new standard , transport mechanisms new . Java  |  The group summarized key properties HTTP follows : Same HTTP APIs Cheaper requests Network- server-friendliness Cache pushingBeing able change mind More encryption The new standard pragmatic way Web come used ; general purpose application protocol rather purely document retrieval hypertext transfer . So , example , HTTP responses interleaved , connections closed unless browser actively navigates away , HTTP headers represented binary avoid penalizing small requests responses ( majority traffic ) . In Java world , HTTP opportunity revisit Javas ancient HTTP API . This dates Java . designed around relatively protocol-agnostic framework based URL class . This predates massive dominance Web Internet protocols . This API kept reality Web used today . The new Java API HTTP completely clean sheet , aban dons pretense protocol independence . Instead , its API purely HTTP , independent HTTP version . It pro vide support new framing connection handling parts ofHTTP , well HTTP. support transitional period . In current version new API ( may , course , change release Java  ) , simple HTTP request looks like : HttpResponse resp = HttpRequest .create ( new URI ( `` http : www.oreilly.com '' ) ) .body ( noBody ( ) ) .GET ( ) .send ( ) ; int responseCode = resp.responseCode ( ) ; String body = resp.body ( asString ( ) ) ; System.out.println ( body ) ;  | Chapter  : The Future Java This style API feels much modern existing legacy HTTP API , reflects trend API design towards flu ent ( builder ) patterns . JShell In many languages , interactive environment explora tory development provided via Read-Evaluate-Print-Loop ( REPL ) tool . In cases ( notably Clojure Lisps ) , theREPL developers spend coding time . This isalso seen languages Scala JRuby . Java previously Beanshell scripting language , never achieved full standardization , project essentially abandoned . Java  introduced Nashorn implementation Java script top JVM , included jjs REPL . Due toNashorns tight integration Java , could useful environ ment playing Java interactive manner . However , still wasnt Java . As part development Java  , Project Kulla started , look producing Java REPL would provide close expe rience full Java possible . The project strict goals , introduce new non-Java syntax . Instead , disables features language useful interactive development order provide less awkward working environ ment . In JShell , statements expressions evaluated immediately context execution state . This means packaged classes , methods also free-standing . JShell uses snippets code provide top-level execution environment . In environment , expressions freely entered JShell automatically create temporary variables hold resulting values keep scope later use : - >  * (  +  ) | Expression", "max-topic-id": 11, "max-topic": "project-http-jug", "Book_ID": 0, "ID": 20}, {"Book_Name": "java-the-legend", "Description": "value : | assigned temporary variable $  type int- > System.out.println ( $  ) ; Java  |  New classes easily defined : - > class Pet { } | Added class Pet- > class Dog extends Pet { } | Added class DogJShell also commands , start access REPL features . For example : - > helpType Java language expression , statement , declaration.Or type one following commands : l list [ ] -- list source typed [ additional output ] ? help -- help message ! -- re-run last snippet < n > -- re-run n-th snippet - < n > -- re-run n-th previous snippetSupported shortcuts include : < tab > -- show possible completions current textJust like REPL environments languages , JShell lets use REPL demonstrate Java language features simply quickly . In turn , makes JShell great learning tool , similar experience Scalas REPL . Further Out Oracle release firm plans one release ahead , relying instead roadmap features future releases . As result , features possible developments discussed sec tion definitively tied specific release . Project Panama Oracle already announced Project Panama , new effort define Foreign Function Interface ( FFI ) JVM . The name evokes Panama canal , infrastructure project designed link Pacific Atlantic . Similarly , Project Panama bridg ing managed world Java unmanaged world C runtimes .  | Chapter  : The Future Java If non-Java programmers find library useful easy access , similarly accessible Java programmers . John Rose The ultimate goal able directly bind native functions ( contents shared libraries operating-system calls ) Java methods . This always possible using Javas Java Native Interface ( JNI ) , interface inconvenient rather limited . This led significant barrier entry mixing native code Java project . Project Panama difficult task ahead , least Javas culture always safe programming , depar ture pitfalls found languages C C++ . To evolve Javas access native code without sacrificing safety major undertaking , would huge benefit millions Java developers worldwide.Project Valhalla Another area major work beyond Java  Project Valhalla . This experimental project focused new features Java lan guage . Currently , features discussion enhanced generics value types.Enhanced generics proposed feature would let Java devel opers write code uses primitive types type parameters col lections , List < int > . This problematic current lan guage JVM type Java supertype Object int . That , Javas type system single root.Currently , prototyping uses approach called any type vari ables , mean type variable range reference types primitives . However , design contains subtleties approached carefully . For example , List < int > andList < String > could supertype specific Object Javas existing type system . One possibility List < Integer > List < String > could con tinue represented runtime List.class , withList < int > represented different runtime type class file.Further Out |  The Internet Things Software static field , new areas interest continue emerge .", "max-topic-id": 11, "max-topic": "project-http-jug", "Book_ID": 0, "ID": 21}, {"Book_Name": "java-the-legend", "Description": "One eagerly anticipated hyped so- called Internet Things ( IoT ) . This idea devices limited compute capability compared laptop phone nevertheless become Internet-enabled able provide useful valuable data streams owners . Java inspired lot hatred , its incredibly influential building modern enterprise software , along tools use develop , maintain , deploy software . Mike LoukidesOver years , lot criticism ( justified ) flung Javas direction abated , replaced something closer grudging , involuntary respect . It therefore surprising , given Javas influence enter prise , application teams working towards IoT developed stacks leverage Javas strengths robustness use world devices possessed limited capability . Its still unclear whether much-discussed revolution IoT actually take place . While raw technology place , major issues security , bandwidth , data handling remain . For matter , industry yet decide whether devices owner beneficiary devices data value purchaser sup plier . In event , IoT become mainstream , Java extremely well-placed become major part architecture systems needed deliver . Conclusion The road Javas first public alpha . today long full technical advances interesting adventures . Along way , Java flourished , become one worlds important widely-used programming environments . How long Java continue ubiquitous today ? No- one knows , ecosystem today flourishing immedi ate course set seems fair . Which means , course , its time raise toast wish Java Happy Birthday .  | Chapter  : The Future Java About Author Ben Evans Cofounder Technology Fellow jClarity , startup delivers performance tools development ops teams . He helps organize London Java Community repre sents Java Community Process Executive Committee , works define new standards Java ecosystem . He Java Champion ; JavaOne Rockstar ; coauthor e Well- Grounded Java Developer Java Nutshell E . He lives Lon , usually found traveling world consulting , speaking , educating Java platform , performance analysis , system architecture , related topics .", "max-topic-id": 7, "max-topic": "today-decision-team", "Book_ID": 0, "ID": 22}, {"Book_Name": "java-intro", "Description": "Introduction Java The Java architecture consists : a high-level object-oriented programming language , platform-independent representation compiled class , pre-defined set run-time libraries , virtual machine . This book mainly concerned la nguage aspects Java associated java.lang library package . Consequently , remainder section provides brief introduction language . Issues associated components introduced needed relevant chapters . The introduction broken following components identifiers primitive data types structured data types reference types blocks exception handling control structures procedures functions object oriented programming , packages classes inheritance interfaces inner classes . Identifiers primitive data types Identifiers Java restrict lengths identifiers . Although language allow use _ included identifier names , emerging style use mixture upper lower case characters . The following example identifiers : Introduction Java Note Java case sensitive . Hence , identifier exampleNameInJava differ- ent ExampleNameInJava . Primitive data types Java provides variety discrete data types floating point type . Discrete data types . The following discrete data types supported : int  -bit signed integer ; short  -bit signed integer ; long  -bit signed integer ; byte  -bit signed integer ; boolean  truth values , true false ; char  Unicode characters (  bits ) . All usual operators types available . Enumeration types introduces Java . . Although primitive type behaves like descrete type used switch statement . The follow- ing example illustrates simple enum eration type days week . Floating point numbers Java provides float double types support   bit IEEE  float- ing point values respectively . Note , floating point literals automatically consid- ered double precision . Consequently , must either explicitly converted float followed letter f. For example : exampleNameInJavaexample_name_in_Javapublic enum Day { SUNDAY , MONDAY , TUESDAY , WEDNESDAY , THURSDAY , FRIDAY , SATURDAY } float bodyTemperature = ( float ) . ;  float bodyTemperature = .f ; Introduction Java Note assignment operator = comments delimited * * . Java also allows  comments ending line . Structured data types Java supports arrays ; single multi dimensional arrays created ; example : Note arrays represented objects indexes start  . The length array determined length field associated array Java record structure . Ho wever , effect achieved using classes . The details classes given Section  , , consider following class date : It possible express range constraints values date 's components . Note also record class , allocator ( new operator ) must used create instance Date . Initialization object achieved using con- structors ( see Section  ) . Important note final int max =  ;  constant float [ ] reading = new float [ max ] ;  index  .. max- boolean [ ] [ ] switches = new boolean [ max ] [ max ] ; class Date { int day , month , year ; } Date birthDate = new Date ( ) ; birthDate.day =  ; birthDate.month =  ; birthDate.year =  ; All objects", "max-topic-id": 12, "max-topic": "float-package-point", "Book_ID": 1, "ID": 23}, {"Book_Name": "java-intro", "Description": "created new operator stored area memory called heap . An activity called garbage collection free associated memory object longer referenced . Introduction Java Reference types All objects Java references actual locations containing encapsulated data , hence additional access pointer type required . Furthermore , forward declaration required . For example : Note result representing object reference values , comparing two objects comparison references values . Hence , compare locations objects values encapsulated objects ( case , values value next fields ) . To compare values requires class implement explicit equals method . A similar situation occurs object assignment . The assignment operator assigns reference . To create actual copy object requires class provide methods clone object . Blocks exception handling In Java , block ( compound statement ) delimited  {   }  , usually following structure class Node { int value ; Node next ;  The type node used even though  declaration completed yet . } Node ref = new Node ( ) ; Node ref = new Node ( ) ; . . . ( ref == ref ) { ... } Introduction Java although declarative part dispersed throughout block . Java exception handlers end block block labeled try block . Each handler specified using catch statement . Consider , following : The catch statement like function declara tion , parameter identifies exception type caught . Inside ha ndler , object name behaves like local variable . A handler parameter type T catch thrown object type E : T E type , r T parent ( super ) class E throw point . It last point integrates exception handling facility object-ori- ented programming model . In example Exception class root class application exceptions . Hence , catch clause catch application exceptions . Here , getMessage method declared Exception class . A call E.getMessage execute appropriate routin e type object thrown . If exception handler found calling context function , calling context terminated handler sought calling context . Hence , Java supports exception propagation . Finally clauses Java also supports finally clause part try statement . The code attached clause guaranteed execute whatever happens try statement irrespective { < declarative part > < sequence statements > } try { code might throw exception } catch ( Exception err ) {  Exception caught , print error message  standard output . System.out.println ( err.getMessage ( ) ) ; } Introduction Java whether exceptions thrown , caught , pr opagated , indeed , even exceptions thrown . Checked unchecked exceptions In Java , exceptions subcla sses predefined class java.lang.Throw- able . The language also defines classes , example : Error , Exception , RuntimeException . The relationship ( common exceptions ) depicted Figure  . FIGURE  . Part The Java Predef ined Throwable Class Hierarchy Throughout book , term Java exception used denote class derived Exception . Objects derived Error describe internal errors resource exhaustion Java run-time support system . Although errors clearly major impact", "max-topic-id": 4, "max-topic": "exception-java-error", "Book_ID": 1, "ID": 24}, {"Book_Name": "java-intro", "Description": "program , little program try { ... } catch ( ... ) { ... } finally {  code executed circumstances } Throwable Error Exception RunTimeException IllegalArgumentException IllegalThreadStateException SecurityException InterruptedException NullPointerException checked unchecked IllegalMonitorStateException Introduction Java thrown ( raised ) assumptions made concerning integrity system . Objects derived Exception hierarchy represent errors programs handle throw . RuntimeException exceptions raised run-time system result program error . They include errors resulting bad cast ( ClassCastException ) , array bounds error ( IndexOutOfBoundException ) , null pointer access ( NullPointerExcep-tion ) , integer divide zero ( ArithmeticException ) etc . Throwable objects derived Error RuntimeExceptionsare called unchecked exceptions , others termed checked exceptions . Checked exceptions must declared function throw . The compiler check appropriate handler found . The compiler makes attempt ensure handlers unchecked exceptions exist . Control structures Control structures grouped together three categories : sequences , decisions loops . Sequence structures Most languages implicitly require sequential execution , specific control struc- ture provided . The definitions block Java indicate { } sequence statements . Execution required follow sequence . Decision structures The common form decision structure statement ; example : In general , multiway decision explicitly stated efficiently imple- mented , using switch structure . ( A ! =  ) { ( BA >  ) { high =  ; } else { high =  ; } } Introduction Java As C C++ , necessary insert statements break switch required command identified . W ithout , control continues next option ( case A ) .Loop ( iteration ) structures Java supports usual statements . The following example illustrates statement ; code assigns first ten elements array , A , value positions array : The free use loop control variable ( ) manner cause many errors , consequently , Java also allows local variable declared inside loop . An example statement given : switch ( command ) { case 'A ' : case 'a ' : action ( ) ; break ; * A * case 't ' : action ( ) ; break ; case 'e ' : action ( ) ; break ; case 'x ' : case 'y ' : case 'z ' : action ( ) ; break ; * x , z * default : * action * } ( =  ; < =  ; i++ ) { * must previously declared * A [ ] = ; * readwritten loop * } * value defined * * loop *for ( int =  ; < = max ; i++ ) { A [ ] = ; } Introduction Java Java also supports variant test occurs end loop : The flexibility iteration statement increased allowing control pass loop ( , loop terminate ) point within ( break ) control pass directly next iteration ( continue ) :Procedures functions Procedures functions declared context class , known collectively methods . In fact , strictly Java supports functions ; procedure considered function return value", "max-topic-id": 18, "max-topic": "value-function-statement", "Book_ID": 1, "ID": 25}, {"Book_Name": "java-intro", "Description": "( indicated void function definition ) . Java passes primitive data type ( int , boo lean , float etc . ) parameters ( often called arguments ) value . Variables class type reference variables . Hence , passed arguments copied , effect object passed reference . Consider function calcu lates roots quadratic equation : ( < expression > ) { * Expression evaluating true false . * * False implies loop termination . * < sequence statements > } { < sequence statements > } ( < expression > ) ; ( true ) { ... ( < expression > ) break ; ( < expression > ) continue ; ... } Introduction Java Note Java requires roots equation passed class type , primitive types ( including double ) passed copy pointer types . Function bodies The bodies functions illustrated completing quadratic definitions given . The invoking function merely involves naming function ( including object class name ) giving appropri ately typed parameters parentheses . Object-oriented programming , packages classes Objects four important properties [ Wegner ,  ] . They inheritance ( type extensibility ) public class Roots { double R , R ; }  following must declared class context boolean quadratic ( double A , double B , double C , Roots R ) ; boolean quadratic ( double A , double B , double C , Roots R ) { double disc ; disc = B*B - .*A*C ; ( disc < . || A == . ) {  roots R.R =  ;  arbitrary values R.R =  ; return false ; } R.R = ( -B + Math.sqrt ( disc ) ) ( .*A ) ; R.R = ( -B - Math.sqrt ( disc ) ) ( .*A ) ; return true ; } Introduction Java automatic object initialization ( constructors ) automatic object finalization ( destructors ) dynamic binding method calls ( polymorphism  sometimes called run-time dispatching operations ) . All supported , form , Javas class interface mechanisms . Related classes interfaces grouped together larger units called p ack- ages . Inheritance perhaps significan concept object abstraction . This enables type ( class ) defined extension previously defined type . The new type inherits base type may include new fields new operations . Once type extended run-time dispatching operations required ensure appropriate operation called particular instance family types . Earlier section , simple class date type introduced . This example illustrates data items grouped together . The full facilities class allow data items ( instance variables fields Java calls ) encapsulated , hence , abstract data types defined . As example , consider class queue abstraction . First , package contain queue declared ( named pack- age , system assumes unnamed package ) . Items packages imported . Then classes declared side package given . One classes Queue declared public , accessed outside package . The keyword public termed modifier Java , ones classes include abstract final .", "max-topic-id": 22, "max-topic": "class-package-introduction", "Book_ID": 1, "ID": 26}, {"Book_Name": "java-intro", "Description": "An abstract class one objects created . Hence , class ha extended ( produce subclass ) subclass made non-abstract objects exist . A final modifier indicates class subclassed . No modifi er indicates class accessi- ble within package . A class mo one modifier certain combina- tions , abstract final , meaningless . Each class declare local instance variables ( fields ) , constructor methods ordinary ( member ) methods . A static field class-wide field shared instances owning class . The field accessible even class Date { int day , month , year ; } Introduction Java instances class . Constructor methods name associated class . An appropriate constructor method automatically called objects class created . All methods object also associated modifiers . These dictate accessibility method ; public , protected private allowed . Public methods allow full access , protected allows access within package subclass defining class private allows access within defining class . Instance variables also modifiers . If modifier given , access restricted package . Static methods ( class-wide methods ) invoked without reference object . They , therefore , access static fields static methods . Member methods instance variables modifiers introduced throughout book . The code Queue class given . package queues ;  package nameimport somepackage.Element ;  import element type class QueueNode {  class local package Element data ;  queued data item QueueNode next ;  reference next QueueNode } public class Queue {  class available outside package public Queue ( ) {  public constructor front = null ; back = null ; } public void insert ( Element E ) {  visible method QueueNode newNode = new QueueNode ( ) ; newNode.data = E ; newNode.next = null ; ( empty ( ) ) { front = newNode ; } else { back.next = newNode ; } back = newNode ; } Introduction Java Java . introduced extra facilities generic programming . The example assumed queue Element class . To generalise class deals element , Element defined generic parameter : The queue instantiated particular class . public Element remove ( ) { visible method ( ! empty ( ) ) { Element tmpE = front.data ; front = front.next ; ( empty ( ) ) back = null ; return tmpE ; }  Garbage collection free QueueNode  object dangling . return null ;  queue empty } public boolean empty ( ) {  visible method return ( front == null ) ; } private QueueNode front , back ;  instance variables } package queues ;  package name class QueueNode < Element > {  class local package Element data ;  generic queued data item QueueNode next ;  reference next QueueNode } public class Queue < Element > {  class available outside package public Queue ( ) {  public constructor ...  } ..  } Introduction Java Inheritance Inheritance Java obtained deriving one class another . Multiple inheritance", "max-topic-id": 22, "max-topic": "class-package-introduction", "Book_ID": 1, "ID": 27}, {"Book_Name": "java-intro", "Description": "supported although similar effects achieved using interfaces ( see ) . Consider example class describes two dimensional coordinate system . This class extended produce new class naming base class declaration derived class extends keyword . The new class placed package  Queue < String > dictionary = new Queue < String > ( ) ; package coordinates ; public class TwoDimensionalCoordinate { public TwoDimensionalCoordinate ( float initialX , float initialY ) {  constructor X = initialX ; Y = initialY ; } public void set ( float F , float F ) { X = F ; Y = F ; } public float getX ( ) { return X ; } public float getY ( ) { return Y ; } private float X ; private float Y ; } Introduction Java A new field Z added constructor class defined , set func- tion overridden , new operation provided . Here , constructor calls base class constructor ( via super keyword ) initializes final dimen- sion . Similarly , overloaded set function calls base class . All method calls Java potentially dispatching ( dynamically bound ) . For example , consider example : .In Java , public classes must reside thei r file . Hence , package distrib- uted across one files , continually augmented . package coordinates ; public class ThreeDimensionalCoordinate extends TwoDimensionalCoordinate {  subclass TwoDimensionalCoordinate float Z ;  new field public ThreeDimensionalCoordinate ( float initialX , float initialY , float initialZ ) {  constructor super ( initialX , initialY ) ;  call superclass constructor Z = initialZ ; } public void set ( float F , float F , float F ) { overloaded method set ( F , F ) ;  call superclass set Z = F ; } public float getZ ( ) {  new method return Z ; } } Introduction Java Here method plot added . Now plot overridden child ( sub ) class : Then following : would plot two dimensional coordinate ; package coordinates ; public class TwoDimensionalCoordinate {  public void plot ( ) {  plot two dimensional point } } package coordinates ; public class ThreeDimensionalCoordinate extends TwoDimensionalCoordinate {  public void plot ( ) {  plot three dimensional point } } { TwoDimensionalCoordinate A = new TwoDimensionalCoordinate ( f , f ) ; A.plot ( ) ; } Introduction Java would plot three dimensional coordinate even though A originally declared type TwoDimensionalCoordinate . This A B reference types . By assigning B A , reference changed object . The Object class All classes , Java , implicit subclasses root class called Object . The defini- tion class given : { TwoDimensionalCoordinate A = new TwoDimensionalCoordinate ( f , f ) ; ThreeDimensionalCoordinate B = new ThreeDimensionalCoordinate ( f , f , f ) ; A = B ; A.plot ( ) ; } package java.lang ; public class Object { public final Class getClass ( ) ; public String", "max-topic-id": 12, "max-topic": "float-package-point", "Book_ID": 1, "ID": 28}, {"Book_Name": "java-intro", "Description": "toString ( ) ; public boolean equals ( Object obj ) ; public int hashCode ( ) ; protected Object clone ( ) throws CloneNotSupportedException ; public final void wait ( ) throws InterruptedException ;  throws unchecked IllegalMonitorStateException public final void wait ( long millis ) throws InterruptedException ;  throws unchecked IllegalMonitorStateException public final void wait ( long millis , int nanos ) throws InterruptedException ;  throws unchecked IllegalMonitorStateException Introduction Java There six methods Object class interest book . The three wait two notify methods used concurrency control consid- ered Chapter  . The sixth method finalize method . It method gets called object destroyed . Hence ov erriding method , child class pro- vide finalization objects created . Of course , class over- rides finalize method , last action call finalize method parent . However , noted finalize called garbage collection take place , may time object longer use ; explicit destructor methods , say , C++ . Furthermore , garbage collection necessarily take place program terminates . In System class two methods used request finalization : The first methods requests JVM complete outstanding finalization code . The second method ( called true parameter ) indicates out- standing finalization completed program exits ; however , deprecated use found lead potential deadlocks . public final void notify ( )  throws unchecked IllegalMonitorStateException ; public final void notifyAll ( )  throws unchecked IllegalMonitorStateException ; protected void finalize ( ) throws Throwable ; } package java.lang ; public class System { ... public static void runFinalization ( ) ; public static void runFinalizeOnExit ( boolean value ) ;  deprecated } Introduction Java  Interfaces Interfaces augment classes increase reusability code . An interface defines reference type contains set meth ods constants . The methods defi- nition abstract , instances interfaces constructed . Instead , one classes implement interface , ob jects implementing interfaces passed arguments methods defining parameter interface type . What interfaces , effect , allow relationships constructed classes out- side class hierarchy . Consider , generic algorithm sort arrays objects . What common classes sorted support less , < , greater , > , operator . Consequently , feature encapsulated interface . The Orderedinterface defines single method lessThan takes argument object whose class implements Ordered interface . Any class implements Ordered interface must compare objects ordering argument passed return whether less object . The class complex numbers class . package interfaceExamples ; public interface Ordered { boolean lessThan ( Ordered O ) ; } import interfaceExamples . * ; class ComplexNumber implements Ordered {  class implements Ordered interface public boolean lessThan ( Ordered O ) {  interface implementation ComplexNumber CN = ( ComplexNumber ) O ;  cast O ( ( realPart*realPart + imagPart*imagPart ) < ( CN.getReal ( ) *CN.getReal ( ) + CN.getImag ( ) *CN.getImag ( ) ) ) { return true ; } return false ; } Introduction Java Now possible write algorithms sort class implements interface .", "max-topic-id": 9, "max-topic": "interface-implement-sort", "Book_ID": 1, "ID": 29}, {"Book_Name": "java-intro", "Description": "For example , array sort : The sort method takes two arguments ; first array objects implement Ordered interface second number items array . The imple- mentation performs exchange sort . The important point example two objects exchanged , reference values exchanged public ComplexNumber ( float I , float J ) {  constructor realPart = I ; imagPart = J ; } public float getReal ( ) { return realPart ; } public float getImag ( ) { return imagPart ; } protected float realPart ; protected float imagPart ; } package interfaceExamples ; public class ArraySort { public static void sort ( Ordered [ ] oa ) { Ordered tmp ; int pos ; ( int =  ; < oa.length -  ; i++ ) { pos = ; ( int j = +  ; j < oa.length ; j++ ) { ( oa [ j ] .lessThan ( oa [ pos ] ) ) { pos = j ; } } tmp = oa [ pos ] ; oa [ pos ] = oa [ ] ; oa [ ] = tmp ; } } } Introduction Java hence matter type object ( long supports Orderedinterface ) . To use classes interfaces simply requires following In fact , package java.lang already defines interface called Comparablewith function called compareTo could used place Ordered . Fur- thermore , static method java.util.Arrays called sort imple- ments merge sort objects . Interfaces three properties noted . Firstly , like classes , participate inheritance relationships interfaces . However , unlike classes , multiple inheritance allowed . Secondly , class implement one interface , hence , much functionality multiple inheritance achieved classes . Finally , interfaces al provide mechanisms call- backs implemented . This object ( server ) needs call one methods defined caller 's ( clients ) class . The clients class type . As Java support function pointers , necessary provide alternative mecha- nism used traditionally languages like C C++ . If class implements interface defines required functions , client pass parameter server . The server call-back methods defined interface . { ComplexNumber [ ] arrayComplex = {  example new ComplexNumber ( f,f ) , new ComplexNumber ( f , f ) , new ComplexNumber ( f,f ) , new ComplexNumber ( f , f ) , new ComplexNumber ( f,f ) , new ComplexNumber ( f , f ) , new ComplexNumber ( f,f ) , new ComplexNumber ( f , f ) } ;  array unsorted ArraySort.sort ( arrayComplex ) ;  array sorted } Introduction Java  Inner classes Inner classes classes declared w ithin classes , allow control visibility give added flexibility . There various types inner classes , important book member , local anonymous classes . Member classes A member class declared wa method field declared . The code member class access fi elds methods enclosing class . Local classes A local class declared within block code within enclosing class ( within", "max-topic-id": 9, "max-topic": "interface-implement-sort", "Book_ID": 1, "ID": 30}, {"Book_Name": "java-intro", "Description": "method enclosing class ) . It access everything member class access . It also access final variable declared locally block declaring local class ( final parameters , block method ) . public class Outer {  local fields methods Outer class MemberClass {  Fields methods Member class  access local fields methods  Outer class. } } public class Outer {  local fields methods Outer void method ( * parameters * ) {  local variables class LocalClass {  Fields methods LocalClass  access local fields methods  Outer class , final fields  parameters declaring method. } } } Introduction Java Anonymous classes An anonymous class local class definition name used immedi- ately create instance class . It often employed create class imple- ments interface without give name class definition . Summary This document provided necessary introductory material Java familiar language experience C , C++ aware basic principles object-oriented programming .for remainder book . The book assume reader familiar sequential programming Java . public class Outer  local fields methods Inner Ordered method ( * parameters * ) {  local variables return new Ordered ( ) {  Here code anonymous class  implements Ordered interface .  Its fields methods access local fields  methods Outer class , final  fields parameters declaring method. } } } Introduction Java", "max-topic-id": 22, "max-topic": "class-package-introduction", "Book_ID": 1, "ID": 31}, {"Book_Name": "java-21", "Description": "Teach Yourself Java  Minutes Teach Yourself Java  Minutes Department Computer Science , Lund Institute Technology Author : Patrik Persson Contact : klas @ cs.lth.seThisisabrieftutorialinJavaforyouwhoalreadyknow anotherobject-orientedlanguage , suchasSimulaorC++ . Thetutorialisorganizedasanumberofexamplesshowing thedetailsofJava.Theintentionistogiveyouenough informationabouttheJavalanguagetobeabletofollowthe course real-time programming.TherearebooksclaimingtoteachyouJavaindays , sinceyoualreadyknowobject-orientationyourlearning time probably closer  minutes  hence title.Thisdocumentmaybefreelycopiedanddistributedfornon-commercialuse.Incaseof changesorenhancements , title , department , author , contactmustbepreserved , changes redistributed made public must mailed contact . Table contents Simple declarations expressions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. .Simple declarations ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...Numeric expressions assignments ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...  .Type conversion ( casting ) ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .Statements ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... . .If statements boolean expressions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...  .While statements ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... . .Classes objects ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. .Classes ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ..Methods ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...Using objects ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .Parameters classes : constructors ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...", "max-topic-id": 10, "max-topic": "history-use-conclusion", "Book_ID": 2, "ID": 32}, {"Book_Name": "java-21", "Description": "... ... ... .. .The main method ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... . ... ..Inheritance ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. ... ... ... ...Interfaces listeners ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... . ... Exceptions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. .Catching exceptions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...Throwing exceptions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ..Declaring new exceptions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. .Unchecked exceptions ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. Miscellaneous ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. .Comments ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. ... ... .Using packages ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. ... ..Arrays ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... . ... ... ... ...Writing terminal ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...", "max-topic-id": 4, "max-topic": "exception-java-error", "Book_ID": 2, "ID": 33}, {"Book_Name": "java-21", "Description": "... ... ... ... ... ... .. ..A complete Java program ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... .. Teach Yourself Java  Minutes What Java , ? The Java programming language developed Sun Microsystems originally became popular language Internet applications ( applets ) . Such applets embed- ded within WWW pages executed users browser . A special format called bytecodeisusedinsteadofordinarymachinecode , andbyusingaspecialJavainterpreterpro- gram code executed computer . Such interpreter called Java Vir- tual Machine ( JVM ) available modern computer systems . ( There nothing Java language enforces byte code technique  thereareactuallysomecompilerswhogeneraterealmachinecode , knownasnativecode , directly . ) The Java language limited Internet applications . It complete general object- oriented language used develop many kinds applications . Although syntaxofJavaisverysimilartothatofC++ , manycomplicatedanderror-pronefeaturesof C++ removed . The result described Simula C++ syntax . SunMicrosystems ( whocreatedtheJavalanguage ) providefreetoolsfordevelopingJava software . The Java home page < http : java.sun.com > links Java compilers computer systems ( Unix Microsoft Windows ) , well lot docu- mentation . It possible download Java compiler use free . Compiling running Java programs In Java , every source le usually contains exactly one class . The le must name class ; class namedTurtleMaze would stored source le TurtleMaze.java . This source le compiled using thejavac compiler : % javac TurtleMaze.javaThe output compiler le name source le , extension .class instead of.java ( i.e. , TurtleMaze.class example ) . That class le contains byte code mentioned earlier , executed right away . Instead executed using JVM ( byte code interpreter ) follows : % java TurtleMazeThis command loads theTurtleMaze class executes main method ( , startstheprogram ) .Ifthe TurtleMazeclassinturnusesotherclasses , theseareloadedautomat- ically needed.Since every class le , several les need recompiled time . Thejavac compiler special option-depend compile les thatdepend particular le . The command % javac -depend TurtleMaze.javawill compile onlyTurtleMaze.java , also changed les depends upon . Teach Yourself Java  Minutes Finding Java Many details Java language left tutorial . If want know Java programming language , refer one following sources : Per Holm : Objektorienterad programmering och Java . Studentlitteratur ,  . MaryCampioneandKathyWalrath : TheJavaTutorial ( secondedition ) .Addison-Wes- ley ,  . Also available WWW : < http : java.sun.comdocsbookstutorialindex.html > .Ken Arnold James Gosling : The Java Programming Language ( second edition ) .Addison-Wesley ,  . Sun Microsystems : Java Technology Home Page : < http : java.sun.com > . Includesdetailed documentation Java class libraries . IfyouhaveaquestionaboutJavawhichthisshorttutorialdoesnotanswer , feelfreetoask teachers course .  Simple declarations expressions This section shows declare use variables simple types , integers booleans . Declarations uses object references shown Section page . Note declarations statements mixed freely ( contrast Simula Pascal ) . . Simple declarations Java supports usual set simple types , integer , boolean , real variables . Here common ones : int , n ;  Two integer variablesdouble x , ;", "max-topic-id": 21, "max-topic": "declaration-statement-minute", "Book_ID": 2, "ID": 34}, {"Book_Name": "java-21", "Description": " Two real coordinatesboolean b ;  Either true falsecharch ;  A character , P  @ . Numeric expressions assignments Numeric expressions written much way languages . n =  * (  +  ) ; x = . ; n = %  ; Modulo , i.e . n ( mod  ) b =true ; ch = x ; Note : assignment written using = opposed  : = many languages . Another symbol , == , used compare two values ( see Section. page ) . If try compare two values using  = get error . Teach Yourself Java  Minutes It possible assign variable initial value directly declaring . Example : double f = . ; boolean flag =true ; UnlikeSimula , theinitialvalueofalocalvariableisundened ( unless , ofcourse , aninitial value explicitly given shown ) . Pitfall : differences integer real division The Java division operator (   ) actually mean two different things : real division real numbers , integer division integers . Usually problem , occasionally lead surprising results : double f ; f =   ;  f .f = . . ;  f . ... In rst case integer division performed , giving integer result (  ) . To get result . ,   expressed real values ( . . ) , means division becomes real division . . Type conversion ( casting ) In languages possible assign , instance , real value integer variable . The value automatically converted ( case , rounded ) right type . Java perform conversions automatically . Instead programmer must indicate conversions must made writing desired type parentheses expression . In Java , conversion called cast . Example : double radians ; int degrees ; ... degrees = radians *  . ;  Errordegrees = ( int ) ( radians *  . ) ;  OKItis , however , possibletoassignanintegervaluetoarealvariablewithoutcasting.Ingen- eral , cast necessary long conversion made without loss infor- mation. StatementsJava statements written much way languages . Just like Sim- ula Pascal , statements grouped together blocks using  {   }  ( correspond-ing tobegin andend languages ) . Teach Yourself Java  Minutes . If statements boolean expressions A simple statement written follows : ( n ==  ) x = . ; Note : There nothen keyword The condition must boolean type written within parenthesesComparison made using ==There course number comparison operators ,  <  ,  >  ,  < = ,  > = , . The one looks different Simula Pascal not equals operator  ! = , used example . ( x ! =  ) = . x ;  Executed x non-zeroelse =  ;  Executed x zeroPitfall : semicolons else statementsNote , unlike Simula Pascal , semicolon else key- word example . However , one uses braces (  {   }  ) form block statements , rightbrace NOT", "max-topic-id": 18, "max-topic": "value-function-statement", "Book_ID": 2, "ID": 35}, {"Book_Name": "java-21", "Description": "followed semicolon . ( In fact , right brace never followed semicolon Java . ) ( x ! =  ) { = . x ; x = x +  ; } else < -- - Note : semicolon =  ; Itiscommonpracticetoalwaysincludethebraces , eveniftheyonlycontainasinglestate- ment . This avoids forgetting whenever another statement added . More boolean expressions For boolean expressions , one needs use logical operators corresponding and , or , not . In Java , written follows : & & or||not ! Teach Yourself Java  Minutes For example : int x , ; boolean b ; ... ( ( x < =  || >  ) & & ! b ) { b =true ; } . While statements  Calculate exp (  ) . End term less .double sum = . ; double term = . ; int k =  ; ( term > = . ) { sum = sum + term ; term = term k ; k++ ;  Shortcut k = k +  } Astheexampleshows , thereisnothingspecialaboutJavaswhilestatement.Theforstate- ment quite general used advanced ways . However , common use repeat statement known number times :  Calculate  + (  ) + (  ) + ... + (  ) int ; double sum = . ; ( =  ; < =  ; i++ ) { sum = sum + . ; } As indicated examples , statement i++ shortcut fori = +  . Actually , least four ways increment integer variable  : = +  ; i++ ; ++i ; +=  ; Aslongasthesestatementsarenotusedaspartsofalargerexpression , theymeanexactly thing . There corresponding operators decrementing variables -- and-=. Classes objectsAs already mentioned , one le normally contains one class..Supporting several ways write essentially thing historical reasons  heritage C programming language . Teach Yourself Java  Minutes . ClassesA class declaration typically contains set attributes ( sometimes called instance vari-ables ) functions ( calledmethods Java ) . So far Java class declaration simi- lar one Simula . Attributes declared almost usual : class Turtle { privateboolean penDown ; protectedint x , ;  Declare stuff } Theprivate andprotected keywords require explanation . The private declara-tion means attributes accessed outside class . In general , attributes kept private prevent classes accessing directly . There two related keywords : public andprotected . Thepublic keyword used declare something accessed classes . Theprotected key- wordspeciesthatsomethingcanbeaccessedfromwithintheclassandallitssubclasses , outside . . MethodsIn Java , functions procedures called methods . Methods declared follows : class Turtle {  Attribute declarations , abovepublic void jumpTo ( int newX , int newY ) { x = newX ; = newY ; } publicint getX ( ) { return x ; } } Thisexamplecontainstwomethods.Therstiscalled jumpToandhastwointegerparam- eters , newX andnewY.Thesecondmethodiscalled getX , hasnoparameters , andreturnsaninteger.Notethatthe empty pair parentheses must present.Both method declarations begin keyword public , make sure accessed classes . ( It however possible declare methods private orpro-tected , useful internal methods used otherclasses", "max-topic-id": 21, "max-topic": "declaration-statement-minute", "Book_ID": 2, "ID": 36}, {"Book_Name": "java-21", "Description": ". ) Teach Yourself Java  Minutes Before methods name , type written indicate methods return type . The jumpTomethoddoesnotreturnavalue ( i.e. , itisaprocedure , notafunction ) .Forthisrea- son , declared asvoid ( meaning nothing ) . ThegetX method returns integer , declared asint.. Using objectsThenew operator used create objects much way languages . If weassumethe Turtleclassrequirestwointegerparameters ( say , XandYcoordinates ) Turtle object created follows : Turtle ; =new Turtle (  ,  ) ; The rst line declaration reference variable Turtle object , like ref ( Turtle ) declarationinSimula.Thesecondlinecreatesanew Turtleobjectandsets thet variable refer . Theresnothingstrangeaboutcallingmethodsinobjects , asthefollowingexamplesshow . int = t.getX ( ) ; t.jumpTo (  ,  ) ; Java garbage collection , need destroy objects manually . . Parameters classes : constructors Intheexampleabove , Turtleclasswasassumedtotaketwoparameters.Thismustof course specied class way , Java done special method called theconstructor . The constructor automatically called object created , parameters constructor match given object created . The constructor written like ordinary method name theclass , andno return type ( even void ) .TheTurtle constructor could , instance , look like : public Turtle ( int initX , int initY ) { x = initX ; = initY ; penDown =false ; } Unlike Simula class parameters , constructors parameters attributes . Instead used give initial values attributes . Teach Yourself Java  Minutes . Themain methodIn Java , statements written within methods classes . This means must method called system program starts executing . This method calledmain must declared class started thecommand line ( example , TurtleMaze class one runsjava TurtleMaze ) .Amain method usually creates objects small work get things going . For Turtle simplemain method may look follows : publicstaticvoid main ( String [ ] args ) { Turtle =new Turtle (  ,  ) ; t.right (  ) ; ( t.getX ( ) <  ) { t.forward (  ) ; } } Therearetwonewthingsabout main , whichcanbothsafelybeignoredfornow.Therst thestatic keyword . It means main method called , associatedwith object , class . ( This implies method access attributes . ) Theothernewthingistheparameternamed args.IftheJavainterpreterisgivenanymore information class name , data passed themain method parame-ter . . InheritanceTo declare subclass another class , use extends keyword class declaration : class NinjaTurtleextends Turtle {  Declarations Ninja turtles } So far , works exactly way subclasses Simula . If superclass con- structorhasanyparameters , itmustbecalledrstusingthekeyword super.Theconstruc- tor forNinjaTurtle might look like : public NinjaTurtle ( int initX , int initY , String name ) { super ( initX , initY ) ;  Call superclass constructor ... initialization stuff ... } Virtual methods InJava , allmethodsarevirtual , sothereisnoneedforanyspecialsyntaxforvirtualmeth- ods . A method class automatically overrides method name parameters superclass . Teach Yourself Java  Minutes It possible declareabstract methods . Such methods really declarations with-out associated implementation , meaning method must implemented subclass . Consider , example , class graphic gures : Figure . That class isthen specialized intoCircle , Square . All gures drawn , imple- mentation left subclasses", "max-topic-id": 5, "max-topic": "class-method-java", "Book_ID": 2, "ID": 37}, {"Book_Name": "java-21", "Description": ". The draw method Figure could declared follows : public abstract void draw ( ) ; Aclasswithoneormoreabstractmethodsisitselfcalledabstract , andmustbedeclaredas writingabstract class instead ofclass . It possible create objectsfrom abstract classes.. Interfaces listeners Aninterface used specify class provide certain set methods . Thiscanbeusefulinanumberofsituationsandisperhapsbestshownwithanexampleas follows . Programswithgraphicaluserinterfacesoftenneedtobeinformedwheneverthemouseis clicked . Usually program method automatically called system whenever user clicks mouse . Javaprovidesaveryexiblewayofspecifyinganobjectandamethodtocallinsuchsitu- ations . Suppose window system declares interface , written follows : interface MouseListener { void processMouseClick ( int x , int ) ; } This declaration essentially says object used handle mouse clicks , class contain aprocessMouseClick method two integer parameters . A class declared toimplement interface : class SomeClassextends SomeOtherClassimplements MouseListener {  ... declarations ... public void processMouseClick ( int x , int ) {  Do something sensible } } Finally , window system method register MouseListener objectsto inform whenever mouse clicked . Such method might look like follows : classWindowSystem { public void addMouseListener ( MouseListener ) {  Insert clever data structure }  ... loads stuff ... } Teach Yourself Java  Minutes Notethatthetypeoftheparameter misnotaclass , butaninterface.Inotherwords , itdoes matter class listener , long class implements theMouseLis-tenerinterface.Thisturnsouttobeaquiteexibletechniqueinpractice , sincethediffer- ent components need little information .  ExceptionsMany things go wrong execution program . These run-time errors canbe divided two broad categories : Faultsintroducedbytheprogrammer , suchasdivisionbyzeroorcallingamethodwith null reference.Things programs control , user entering garbage keyboard program expects positive integer . The latter category one programmers usually take care . The traditional way handling errors put code question method returns value indicate whether whings went well . A method read positive integer keyboard could , instance , look like : public int getNatural ( ) { ... } Suppose special value - used indicate invalid number entered user . The code calls method would check return value statement . If code part method , method may turn return value indicate things went wrong . This kind programming easily turn lot statements special return values , statements actually something.. Catching exceptions Using Java exceptions , method could declared follows : public int getNatural ( ) throws IOException { ... } This method said tothrow anexception ( specically , IOException ) whensomething else natural number entered keyboard . The code calls method could look like : int , n ; try { n = getNatural ( ) ; = n *  ;  If exception thrown , executed } catch ( IOException e ) {  The user entered something wrong . Use  default . n =  ; =  ; } Teach Yourself Java  Minutes The statement ( ) within thetry clause executed usual , whenever exception occurs , thetry clause interrupted statements within correspondingcatchclause executed . The execution continues trycatch clauses.Thetry clause contain many statements throw exceptions , sev- eraldifferent catchclauses.Thismeansthattheerrorhandlingisseparatedfromthecode thatactuallydoesthework.Itoftenalsohelpsinreducingthecomplexityoftheerrorhan- dling code.If method handle exception ( instance , uses getNatural ( ) method without trycatch clauses ) , exception must passed calling method . This done using athrows declaration indicated :", "max-topic-id": 4, "max-topic": "exception-java-error", "Book_ID": 2, "ID": 38}, {"Book_Name": "java-21", "Description": "public void doStuff ( ) throws IOException { int n = getNatural ( ) ;  May throw exception Clever calculations using n ... } The method callsdoStuff ( ) must turn either catch exception pass . If exception caught ( even main method passes ) , execution aborted error message.. Throwing exceptions It course also possible throw exceptions things go wrong . The getNatural ( ) method could look follows ( Java-pseudo-code ) : public int getNatural ( ) throws IOException { charch ; ( input ) { ch = ( read character ) ; ( ch <  || ch >  ) { throw new IOException ( bad natural number ) ; } ... } ... } Note thenew keyword throw statement . This reveals exception actuallyanobjectwhichcancontaininformation.Inparticular , itcontainsastringdescrib- ing error , indicated . . Declaring new exceptions Although number pre-dened exception classes Java , may occasion- ally need declare exceptions . This done creating subclass existing Exception class . Suppose want throw exception external equipment overheating . Such exception could hold information current temperature , follows : Teach Yourself Java  Minutes class OverheatedExceptionextends Exception { public OverheatedException ( String , double temp ) { super ( ) ; myTemperature = temp ; } public double getTemperature ( ) { return myTemperature ; } private double myTemperature ; } . Unchecked exceptions Some exceptions caught : so-called unchecked exceptions thrown run-time system cases . For instance , integer division zero occurs , anArithmeticException thrown system . This exception nor- mally caught anywhere , thrown execution program aborted error message ( like languages ) . It possible catch unchecked exceptions , occasionally useful .  MiscellaneousThis section contains details Java might useful know writing Java programs . . CommentsOne kind comments already shown : line comment , starts  and extends end line . Multi-line comments written using  * * asfollows : * This comment continues second line * ( A special case multi-line comments thedocumentation comments . They written immediately classes methods begin  ** ( two asterisks ) end , usual , * ( one asterisk ) . Such comments used special tool , java-doc , automatically generate low-level documentation program . ) . Using packages Some library classes , well help classes laboratories , areprovided packages . To use classes package , must imported . Teach Yourself Java  Minutes For instance , many classes used graphical user interfaces Java ( AWT , Abstract Window Toolkit ) belong java.awt package . To use classes , fol- lowing must written rst source le : import java.awt . * ; . Arrays A Java array similar object ways . It example accessed using refer- ence variables . Array references declared follows : int [ ] someInts ;  An integer arrayTurtle [ ] turtleFarm ;  An array references TurtlesSincethesevariablesareonlyreferencestoarrays , thearraysizesarenotgiveninthedec- larations , arrays actually created . someInts =newint [  ] ; turtleFarm =new Turtle [  ] ; The array elements used", "max-topic-id": 4, "max-topic": "exception-java-error", "Book_ID": 2, "ID": 39}, {"Book_Name": "java-21", "Description": "simple scalar variables . ( Note indices always start  end size minus one , elements thesomeInts arrayhave indices   . ) int ; ( =  ; < someInts.length ; = +  ) { someInts [ ] = * ; } The expression someInts.length means length vector ,  case . . Writing terminalTo write something terminal , call one methods print andprintln theobjectSystem.out . They write argument ( String ) terminal . The lattermethod , println , also ends line . Example : System.out.print ( Jag vill bo  ) ; System.out.println ( i en svamp ) ; System.out.println ( Annars fr jag kramp ) ; The resulting output : Jag vill bo en svamp Annars fr jag krampVariable values printed like : int ; =  *  ; System.out.println (  *  =  + ) ; Teach Yourself Java  Minutes  A complete Java program The following example program displays window graphical gures ( squares circles ) . The program intended useful way except example complete Java program . Figure.java import java.awt.* ; ***Simpleabstractclassforgraphicfiguresthatcanbedrawninwindows . *abstract class Figure { ** * Constructor : takes two parameters , X Y coordinates . *public Figure ( int inX , int inY ) { x = inX ; = inY ; } ** * Abstract method drawing thing . * * The g parameter pen used draw things * window . * public abstract void draw ( Graphics g ) ; ** * Move figure ( newX , newY ) . *public void move ( int newX , int newY ) { x = newX ; = newY ; } protected int x , ;  X Y coordinates } Teach Yourself Java  Minutes Square.java import java.awt . * ; ** * A square drawn window . The coordinates represent * upper left corner square . *class Squareextends Figure { ***Constructor : firsttwoparametersarethecoordinates , thethirdis * side . *public Square ( int inX , int inY , int inSide ) { super ( inX , inY ) ; side = inSide ; } ** * Drawing method squares . * public void draw ( Graphics g ) { g.drawRect ( x , , side , side ) ; } private int side ;  Square side } Circle.java import java.awt . * ; ** * Circle class . The coordinates represent circles center . *class Circleextends Figure { ** * Constructor : first two parameters coordinates , * third diameter . *public Circle ( int inX , int inY , int inDiam ) { super ( inX , inY ) ; = inDiam ; Teach Yourself Java  Minutes  } ** * Drawing method circles . *public void draw ( Graphics g ) { g.drawOval ( x , , , ) ; } private int ;  Circle diameter } FigureWindow.java import java.awt . * ; ***Asimplewindowtodisplaygraphicfiguresin.Thewindowisasubclass *oftheJavaFrameclass , whichdescribesgraphicwindows.Thewindow * keeps figures array . * * The Java window system (", "max-topic-id": 8, "max-topic": "int-figure-java", "Book_ID": 2, "ID": 40}, {"Book_Name": "java-21", "Description": "AWT ) automatically calls paint method * Frame class whenever windows contents need redrawn . A * new implementation paint provided FigureWindow handle * drawing . *class FigureWindowextends Frame { ***Constructor : theparameterindicatesthemaximalnumberoffigures . *public FigureWindow ( int max ) { super ( `` Fabulous Figures ) ;  Window titlefigures =new Figure [ max ] ; nbrOfFigures =  ; } ***Addthefigureftothewindow.Ifthemaximalnumberoffigureshas * reached , nothing happens . *public void addFigure ( Figure f ) { ( nbrOfFigures < figures.length ) { figures [ nbrOfFigures ] = f ; nbrOfFigures++ ; } } Teach Yourself Java  Minutes ** * This method called automatically system . Draws * raphic figures associated window . * * The g parameter drawing pen provided system . *public void paint ( Graphics g ) { int ; ( =  ; < nbrOfFigures ; i++ ) { figures [ ] .draw ( g ) ; } }  Array graphic figuresprivate Figure [ ] figures ;  Current number figuresprivate int nbrOfFigures ; ** * Main method : creates FigureWindow figures inside . *public static void main ( String [ ] args ) { FigureWindow w =new FigureWindow (  ) ; w.setSize (  ,  ) ; w.addFigure ( new Square (  ,  ,  ) ) ; w.addFigure ( new Circle (  ,  ,  ) ) ; w.addFigure ( new Circle (  ,  ,  ) ) ; w.show ( ) ; } }", "max-topic-id": 8, "max-topic": "int-figure-java", "Book_ID": 2, "ID": 41}]